/*** Generated by streamline 0.10.15 (callbacks) - DO NOT EDIT ***/ var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename, false),__func=__rt.__func,__cb=__rt.__cb; (function() {
  var AVAILABLE, UNAVAILABLE_MSG, db, expect, flows, i, name, neo4j, test, user0, user1, user2, user3, user4, user5, user6, users, _fn, _ref;

  expect = require("chai").expect;

  flows = require("streamline/lib/util/flows");

  neo4j = require("..");

  db = new neo4j.GraphDatabase("http://localhost:7474");

  AVAILABLE = true;

  UNAVAILABLE_MSG = "Gremlin plugin not available; not running Gremlin tests.";

  users = (function() {
    var _i, _results;
    _results = [];
    for (i = _i = 0; (_i <= 6); i = ++_i) {
      _results.push(db.createNode({
        name: ("gremlinTest" + i) })); };


    return _results;
  })();

  user0 = users[0];

  user1 = users[1];

  user2 = users[2];

  user3 = users[3];

  user4 = users[4];

  user5 = users[5];

  user6 = users[6];

  this.gremlin = {
  "(pre-req) check availability": function _o_pre_o_req_o__o_check_o_availability__1(_) { var extensions; var __frame = { name: "_o_pre_o_req_o__o_check_o_availability__1", line: 42 }; return __func(_, this, arguments, _o_pre_o_req_o__o_check_o_availability__1, 0, __frame, function __$_o_pre_o_req_o__o_check_o_availability__1() {

        return db.getServices(__cb(_, __frame, 2, 22, function ___(__0, __1) { extensions = __1.extensions;
          return _(null, AVAILABLE = ((((extensions != null) ? extensions["GremlinPlugin"] : void 0)) != null)); }, true)); }); },

  "(pre-req) save nodes": function _o_pre_o_req_o__o_save_o_nodes__2(_) { var user; var __frame = { name: "_o_pre_o_req_o__o_save_o_nodes__2", line: 47 }; return __func(_, this, arguments, _o_pre_o_req_o__o_save_o_nodes__2, 0, __frame, function __$_o_pre_o_req_o__o_save_o_nodes__2() {









        return (function ___closure(_) { var _i, _len, _results; _results = []; for (_i = 0, _len = users.length; (_i < _len); _i++) { user = users[_i]; _results.push(user.save(false)); }; return _(null, _results); })(__cb(_, __frame, 2, 30, function ___(__0, __2) { return flows.collect(__cb(_, __frame, 2, 19, _, true), __2); }, true)); }); },

  "query single user, using param": function query_o_single_o_user_o__o_using_o_param__3(_) { var result; var __frame = { name: "query_o_single_o_user_o__o_using_o_param__3", line: 59 }; return __func(_, this, arguments, query_o_single_o_user_o__o_using_o_param__3, 0, __frame, function __$query_o_single_o_user_o__o_using_o_param__3() {

        return db.execute("g.v(userId)", {
          userId: user0.id }, __cb(_, __frame, 2, 18, function ___(__0, __1) { result = __1;

          expect(result).to.be.an("object");
          expect(result.id).to.equal(user0.id);
          return _(null, expect(result.data).to.eql(user0.data)); }, true)); }); },

  "(pre-req) create relationships": function _o_pre_o_req_o__o_create_o_relationships__4(_) { var createFollowRelationships, user, _i, _len, _results; var __frame = { name: "_o_pre_o_req_o__o_create_o_relationships__4", line: 68 }; return __func(_, this, arguments, _o_pre_o_req_o__o_create_o_relationships__4, 0, __frame, function __$_o_pre_o_req_o__o_create_o_relationships__4() {

        createFollowRelationships = function createFollowRelationships__1(i, _) { var i1, i2, i3, user; var __frame = { name: "createFollowRelationships__1", line: 70 }; return __func(_, this, arguments, createFollowRelationships__1, 1, __frame, function __$createFollowRelationships__1() {

            user = users[i];
            i1 = (((i + 1)) % users.length);
            i2 = (((i + 2)) % users.length);
            i3 = (((i + 3)) % users.length);
            return flows.collect(__cb(_, __frame, 6, 21, _, true), [user.createRelationshipTo(users[i1], "gremlin_follows", { }, false),user.createRelationshipTo(users[i2], "gremlin_follows", { }, false),user.createRelationshipTo(users[i3], "gremlin_follows", { }, false),]); }); };

        _results = [];
        i = _i = 0; _len = users.length; var __4 = false; return (function ___(__break) { var __more; var __loop = __cb(_, __frame, 0, 0, function __$_o_pre_o_req_o__o_create_o_relationships__4() { __more = false; if (__4) { i = ++_i; } else { __4 = true; } ; var __3 = (_i < _len); if (__3) {
              user = users[i];
              return createFollowRelationships(i, __cb(_, __frame, 13, 22, function ___(__0, __2) { _results.push(__2); while (__more) { __loop(); }; __more = true; }, true)); } else { __break(); } ; }); do { __loop(); } while (__more); __more = true; })(function __$_o_pre_o_req_o__o_create_o_relationships__4() {

          return _(null, _results); }); }); },

  "query connected nodes": function query_o_connected_o_nodes__5(_) { var rels; var __frame = { name: "query_o_connected_o_nodes__5", line: 85 }; return __func(_, this, arguments, query_o_connected_o_nodes__5, 0, __frame, function __$query_o_connected_o_nodes__5() {

        return db.execute((("g.v(" + user0.id) + ").in('gremlin_follows')"), { }, __cb(_, __frame, 2, 16, function ___(__0, __1) { rels = __1;
          expect(rels).to.be.an("array");
          expect(rels).to.have.length(3);
          expect(rels[1]).to.be.an("object");
          return _(null, expect([user4.id,user5.id,user6.id,]).to.contain(rels[1].id)); }, true)); }); },

  "return multiple types": function return_o_multiple_o_types__6(_) { var traversals; var __frame = { name: "return_o_multiple_o_types__6", line: 93 }; return __func(_, this, arguments, return_o_multiple_o_types__6, 0, __frame, function __$return_o_multiple_o_types__6() {

        return db.execute((("g.v(" + user0.id) + ").transform{ [it, it.out.toList(), it.in.count()] }"), { }, __cb(_, __frame, 2, 22, function ___(__0, __1) { traversals = __1;
          expect(traversals).to.be.an("array");
          expect(traversals).to.have.length(1);
          expect(traversals[0]).to.be.an("array");
          expect(traversals[0]).to.have.length(3);
          expect(traversals[0][0]).to.be.an("object");
          expect(traversals[0][0].id).to.equal(user0.id);
          expect(traversals[0][0].data).to.eql(user0.data);
          expect(traversals[0][1]).to.be.an("array");
          expect(traversals[0][1]).to.have.length(3);
          expect(traversals[0][1][1]).to.be.an("object");
          expect([user1.id,user2.id,user3.id,]).to.contain(traversals[0][1][1].id);
          return _(null, expect(traversals[0][2]).to.equal(3)); }, true)); }); },

  "query without params arg": function query_o_without_o_params_o_arg__7(_) { var params_test; var __frame = { name: "query_o_without_o_params_o_arg__7", line: 109 }; return __func(_, this, arguments, query_o_without_o_params_o_arg__7, 0, __frame, function __$query_o_without_o_params_o_arg__7() {

        return db.execute((("g.v(" + user0.id) + ")"), __cb(_, __frame, 2, 23, function ___(__0, __1) { params_test = __1;
          expect(params_test).to.be.an("object");
          expect(params_test.id).to.equal(user0.id);
          return _(null, expect(params_test.data).to.eql(user0.data)); }, true)); }); } };



  _ref = this.gremlin;
  _fn = (function(_this) {
    return function(name, test) {
      return _this.gremlin[name] = function __1(_) { var __frame = { name: "__1", line: 121 }; return __func(_, this, arguments, __1, 0, __frame, function __$__1() { return (function __$__1(__then) {
            if (AVAILABLE) {
              return test(__cb(_, __frame, 2, 17, _, true)); } else {

              return _(null, console.log(UNAVAILABLE_MSG)); } ; })(_); }); }; };



  })(this);
  for (name in _ref) {
    test = _ref[name];
    _fn(name, test); };


}).call(this);
