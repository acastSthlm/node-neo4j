/*** Generated by streamline 0.10.15 (callbacks) - DO NOT EDIT ***/ var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename, false),__func=__rt.__func,__cb=__rt.__cb; (function() {
  var db, expect, flows, i, neo4j, user0, user1, user2, user3, user4, user5, user6, user7, user8, user9, users;

  expect = require("chai").expect;

  flows = require("streamline/lib/util/flows");

  neo4j = require("..");

  db = new neo4j.GraphDatabase("http://localhost:7474");

  users = (function() {
    var _i, _results;
    _results = [];
    for (i = _i = 0; (_i <= 9); i = ++_i) {
      _results.push(db.createNode({
        name: ("user" + i) })); };


    return _results;
  })();

  user0 = users[0];

  user1 = users[1];

  user2 = users[2];

  user3 = users[3];

  user4 = users[4];

  user5 = users[5];

  user6 = users[6];

  user7 = users[7];

  user8 = users[8];

  user9 = users[9];

  this.cypher = {
  "(pre-req) save nodes": function _o_pre_o_req_o__o_save_o_nodes__1(_) { var user; var __frame = { name: "_o_pre_o_req_o__o_save_o_nodes__1", line: 44 }; return __func(_, this, arguments, _o_pre_o_req_o__o_save_o_nodes__1, 0, __frame, function __$_o_pre_o_req_o__o_save_o_nodes__1() {









        return (function ___closure(_) { var _i, _len, _results; _results = []; for (_i = 0, _len = users.length; (_i < _len); _i++) { user = users[_i]; _results.push(user.save(false)); }; return _(null, _results); })(__cb(_, __frame, 2, 30, function ___(__0, __2) { return flows.collect(__cb(_, __frame, 2, 19, _, true), __2); }, true)); }); },

  "query single user": function query_o_single_o_user__2(_) { var results; var __frame = { name: "query_o_single_o_user__2", line: 56 }; return __func(_, this, arguments, query_o_single_o_user__2, 0, __frame, function __$query_o_single_o_user__2() {

        return db.query((("START n=node(" + user0.id) + ")\nRETURN n"), __cb(_, __frame, 2, 19, function ___(__0, __1) { results = __1;
          expect(results).to.be.an("array");
          expect(results).to.have.length(1);
          expect(results[0]).to.be.an("object");
          expect(results[0]["n"]).to.be.an("object");
          expect(results[0]["n"].id).to.equal(user0.id);
          return _(null, expect(results[0]["n"].data).to.eql(user0.data)); }, true)); }); },

  "query multiple users": function query_o_multiple_o_users__3(_) { var results; var __frame = { name: "query_o_multiple_o_users__3", line: 66 }; return __func(_, this, arguments, query_o_multiple_o_users__3, 0, __frame, function __$query_o_multiple_o_users__3() {

        return db.query((((((("START n=node(" + user0.id) + ",") + user1.id) + ",") + user2.id) + ")\nRETURN n\nORDER BY n.name"), __cb(_, __frame, 2, 19, function ___(__0, __1) { results = __1;
          expect(results).to.be.an("array");
          expect(results).to.have.length(3);
          expect(results[1]).to.be.an("object");
          expect(results[1]["n"]).to.be.an("object");
          return _(null, expect(results[1]["n"].data).to.eql(user1.data)); }, true)); }); },

  "(pre-req) create relationships": function _o_pre_o_req_o__o_create_o_relationships__4(_) { var createFollowRelationships, user, _i, _len, _results; var __frame = { name: "_o_pre_o_req_o__o_create_o_relationships__4", line: 75 }; return __func(_, this, arguments, _o_pre_o_req_o__o_create_o_relationships__4, 0, __frame, function __$_o_pre_o_req_o__o_create_o_relationships__4() {

        createFollowRelationships = function createFollowRelationships__1(i, _) { var i1, i2, i3, user; var __frame = { name: "createFollowRelationships__1", line: 77 }; return __func(_, this, arguments, createFollowRelationships__1, 1, __frame, function __$createFollowRelationships__1() {

            user = users[i];
            i1 = (((i + 1)) % users.length);
            i2 = (((i + 2)) % users.length);
            i3 = (((i + 3)) % users.length);
            return flows.collect(__cb(_, __frame, 6, 21, _, true), [user.createRelationshipTo(users[i1], "follows", { }, false),user.createRelationshipTo(users[i2], "follows", { }, false),user.createRelationshipTo(users[i3], "follows", { }, false),]); }); };

        _results = [];
        i = _i = 0; _len = users.length; var __4 = false; return (function ___(__break) { var __more; var __loop = __cb(_, __frame, 0, 0, function __$_o_pre_o_req_o__o_create_o_relationships__4() { __more = false; if (__4) { i = ++_i; } else { __4 = true; } ; var __3 = (_i < _len); if (__3) {
              user = users[i];
              return createFollowRelationships(i, __cb(_, __frame, 13, 22, function ___(__0, __2) { _results.push(__2); while (__more) { __loop(); }; __more = true; }, true)); } else { __break(); } ; }); do { __loop(); } while (__more); __more = true; })(function __$_o_pre_o_req_o__o_create_o_relationships__4() {

          return _(null, _results); }); }); },

  "query relationships / return multiple values": function query_o_relationships_o__o__o_return_o_multiple_o_values__5(_) { var results; var __frame = { name: "query_o_relationships_o__o__o_return_o_multiple_o_values__5", line: 92 }; return __func(_, this, arguments, query_o_relationships_o__o__o_return_o_multiple_o_values__5, 0, __frame, function __$query_o_relationships_o__o__o_return_o_multiple_o_values__5() {

        return db.query((("START n=node(" + user6.id) + ")\nMATCH (n) -[r:follows]-> (m)\nRETURN r, m.name\nORDER BY m.name"), __cb(_, __frame, 2, 19, function ___(__0, __1) { results = __1;
          expect(results).to.be.an("array");
          expect(results).to.have.length(3);
          expect(results[1]).to.be.an("object");
          expect(results[1]["r"]).to.be.an("object");
          expect(results[1]["r"].type).to.eq("follows");
          return _(null, expect(results[1]["m.name"]).to.equal(user8.data.name)); }, true)); }); },

  "send query parameters instead of literals": function send_o_query_o_parameters_o_instead_o_of_o_literals__6(_) { var results; var __frame = { name: "send_o_query_o_parameters_o_instead_o_of_o_literals__6", line: 102 }; return __func(_, this, arguments, send_o_query_o_parameters_o_instead_o_of_o_literals__6, 0, __frame, function __$send_o_query_o_parameters_o_instead_o_of_o_literals__6() {

        return db.query("START n=node({userId})\nMATCH (n) -[r:follows]-> (m)\nRETURN r, m.name\nORDER BY m.name", {
          userId: user3.id }, __cb(_, __frame, 2, 19, function ___(__0, __1) { results = __1;

          expect(results).to.be.an("array");
          expect(results).to.have.length(3);
          expect(results[1]).to.be.an("object");
          expect(results[1]["r"]).to.be.an("object");
          expect(results[1]["r"].type).to.eq("follows");
          return _(null, expect(results[1]["m.name"]).to.equal(user5.data.name)); }, true)); }); },

  "return collection/array of nodes": function return_o_collection_o_array_o_of_o_nodes__7(_) { var results; var __frame = { name: "return_o_collection_o_array_o_of_o_nodes__7", line: 114 }; return __func(_, this, arguments, return_o_collection_o_array_o_of_o_nodes__7, 0, __frame, function __$return_o_collection_o_array_o_of_o_nodes__7() {

        return db.query((((((("START n=node(" + user0.id) + ",") + user1.id) + ",") + user2.id) + ")\nRETURN collect(n)"), __cb(_, __frame, 2, 19, function ___(__0, __1) { results = __1;
          expect(results).to.be.an("array");
          expect(results).to.have.length(1);
          expect(results[0]).to.be.an("object");
          expect(results[0]["collect(n)"]).to.be.an("array");
          expect(results[0]["collect(n)"]).to.have.length(3);
          expect(results[0]["collect(n)"][1]).to.be.an("object");
          expect(results[0]["collect(n)"][1].id).to.equal(user1.id);
          return _(null, expect(results[0]["collect(n)"][1].data).to.eql(user1.data)); }, true)); }); },

  "return paths": function return_o_paths__8(_) { var results; var __frame = { name: "return_o_paths__8", line: 126 }; return __func(_, this, arguments, return_o_paths__8, 0, __frame, function __$return_o_paths__8() {

        return db.query("START from=node({fromId}), to=node({toId})\nMATCH path=shortestPath(from -[:follows*..3]-> to)\nRETURN path", {
          fromId: user0.id,
          toId: user6.id }, __cb(_, __frame, 2, 19, function ___(__0, __1) { results = __1;

          expect(results).to.be.an("array");
          expect(results).to.have.length(1);
          expect(results[0]).to.be.an("object");
          expect(results[0]["path"]).to.be.an("object");
          expect(results[0]["path"].start).to.be.an("object");
          expect(results[0]["path"].start.id).to.equal(user0.id);
          expect(results[0]["path"].end).to.be.an("object");
          expect(results[0]["path"].end.id).to.equal(user6.id);
          expect(results[0]["path"].nodes).to.be.an("array");
          expect(results[0]["path"].nodes).to.have.length(3);
          expect(results[0]["path"].nodes[1]).to.be.an("object");
          expect(results[0]["path"].nodes[1].id).to.equal(user3.id);
          expect(results[0]["path"].relationships).to.be.an("array");
          expect(results[0]["path"].relationships).to.have.length(2);
          return _(null, expect(results[0]["path"].relationships[1]).to.be.an("object")); }, true)); }); } };



}).call(this);
