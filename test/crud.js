/*** Generated by streamline 0.10.15 (callbacks) - DO NOT EDIT ***/ var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename, false),__func=__rt.__func,__cb=__rt.__cb; (function() {
  var aseem, aseemData, daniel, danielData, db, expect, flows, indexConfig, indexConfig2, mat, matData, neo4j, nodeCustomIndexName, nodeCustomIndexName2, nodeIndexName, relCustomIndexName, relCustomIndexName2, relIndexName, relationship, testRelationship, testRelationships;

  expect = require("chai").expect;

  flows = require("streamline/lib/util/flows");

  neo4j = require("..");

  db = new neo4j.GraphDatabase("http://localhost:7474");

  danielData = {
    name: "Daniel" };


  aseemData = {
    name: "Aseem" };


  matData = {
    name: "Mat",
    name2: "Matt",
    id: "12345" };


  indexConfig = {
    type: "fulltext",
    provider: "lucene",
    to_lower_case: "true" };


  indexConfig2 = {
    type: "fulltext",
    to_lower_case: "false" };


  daniel = null;

  aseem = null;

  mat = null;

  relationship = null;

  nodeIndexName = "testUsers";

  nodeCustomIndexName = "testUsersFullTextLowercase";

  nodeCustomIndexName2 = "testUsersFullTextNoLowercase";

  relIndexName = "testFollows";

  relCustomIndexName = "testFollowsFullTextLowercase";

  relCustomIndexName2 = "testFollowsFullTextNoLowercase";

  this.crud = {
    getNodeIndexes: function getNodeIndexes__1(_) { var name, nodeIndexes, _i, _len, _results; var __frame = { name: "getNodeIndexes__1", line: 58 }; return __func(_, this, arguments, getNodeIndexes__1, 0, __frame, function __$getNodeIndexes__1() {

        return db.getNodeIndexes(__cb(_, __frame, 2, 23, function ___(__0, __1) { nodeIndexes = __1;
          expect(nodeIndexes).to.be.an("array");
          _results = [];
          for (_i = 0, _len = nodeIndexes.length; (_i < _len); _i++) {
            name = nodeIndexes[_i];
            expect(nodeIndexes).to.contain.key(name);
            expect(nodeIndexes[name]).to.be.an("object");
            _results.push(expect(nodeIndexes[name].type).to.be.a("string")); };

          return _(null, _results); }, true)); }); },

    getRelationshipIndexes: function getRelationshipIndexes__2(_) { var name, relIndexes, _i, _len, _results; var __frame = { name: "getRelationshipIndexes__2", line: 71 }; return __func(_, this, arguments, getRelationshipIndexes__2, 0, __frame, function __$getRelationshipIndexes__2() {

        return db.getRelationshipIndexes(__cb(_, __frame, 2, 22, function ___(__0, __1) { relIndexes = __1;
          expect(relIndexes).to.be.an("array");
          _results = [];
          for (_i = 0, _len = relIndexes.length; (_i < _len); _i++) {
            name = relIndexes[_i];
            expect(relIndexes).to.contain.key(name);
            expect(relIndexes[name]).to.be.an("object");
            _results.push(expect(relIndexes[name].type).to.be.a("string")); };

          return _(null, _results); }, true)); }); },

    createNodeIndex: function createNodeIndex__3(_) { var nodeIndexes; var __frame = { name: "createNodeIndex__3", line: 84 }; return __func(_, this, arguments, createNodeIndex__3, 0, __frame, function __$createNodeIndex__3() {

        return db.createNodeIndex(nodeIndexName, __cb(_, __frame, 2, 9, function __$createNodeIndex__3() {
          return db.getNodeIndexes(__cb(_, __frame, 3, 23, function ___(__0, __1) { nodeIndexes = __1;
            expect(nodeIndexes).to.contain(nodeIndexName);
            return _(null, expect(nodeIndexes).to.contain.key(nodeIndexName)); }, true)); }, true)); }); },

  "createNodeIndex custom fulltext with lowercase": function createNodeIndex_o_custom_o_fulltext_o_with_o_lowercase__4(_) { var nodeIndexes; var __frame = { name: "createNodeIndex_o_custom_o_fulltext_o_with_o_lowercase__4", line: 91 }; return __func(_, this, arguments, createNodeIndex_o_custom_o_fulltext_o_with_o_lowercase__4, 0, __frame, function __$createNodeIndex_o_custom_o_fulltext_o_with_o_lowercase__4() {

        return db.createNodeIndex(nodeCustomIndexName, indexConfig, __cb(_, __frame, 2, 9, function __$createNodeIndex_o_custom_o_fulltext_o_with_o_lowercase__4() {
          return db.getNodeIndexes(__cb(_, __frame, 3, 23, function ___(__0, __1) { nodeIndexes = __1;
            expect(nodeIndexes).to.contain(nodeCustomIndexName);
            return _(null, expect(nodeIndexes).to.contain.key(nodeCustomIndexName)); }, true)); }, true)); }); },

  "createNodeIndex custom fulltext with no lowercase": function createNodeIndex_o_custom_o_fulltext_o_with_o_no_o_lowercase__5(_) { var nodeIndexes; var __frame = { name: "createNodeIndex_o_custom_o_fulltext_o_with_o_no_o_lowercase__5", line: 98 }; return __func(_, this, arguments, createNodeIndex_o_custom_o_fulltext_o_with_o_no_o_lowercase__5, 0, __frame, function __$createNodeIndex_o_custom_o_fulltext_o_with_o_no_o_lowercase__5() {

        return db.createNodeIndex(nodeCustomIndexName2, indexConfig, __cb(_, __frame, 2, 9, function __$createNodeIndex_o_custom_o_fulltext_o_with_o_no_o_lowercase__5() {
          return db.getNodeIndexes(__cb(_, __frame, 3, 23, function ___(__0, __1) { nodeIndexes = __1;
            expect(nodeIndexes).to.contain(nodeCustomIndexName2);
            return _(null, expect(nodeIndexes).to.contain.key(nodeCustomIndexName2)); }, true)); }, true)); }); },

    createRelationshipIndex: function createRelationshipIndex__6(_) { var relIndexes; var __frame = { name: "createRelationshipIndex__6", line: 105 }; return __func(_, this, arguments, createRelationshipIndex__6, 0, __frame, function __$createRelationshipIndex__6() {

        return db.createRelationshipIndex(relIndexName, __cb(_, __frame, 2, 9, function __$createRelationshipIndex__6() {
          return db.getRelationshipIndexes(__cb(_, __frame, 3, 22, function ___(__0, __1) { relIndexes = __1;
            expect(relIndexes).to.contain(relIndexName);
            return _(null, expect(relIndexes).to.contain.key(relIndexName)); }, true)); }, true)); }); },

  "createRelationshipIndex custom fulltext with lowercase": function createRelationshipIndex_o_custom_o_fulltext_o_with_o_lowercase__7(_) { var relIndexes; var __frame = { name: "createRelationshipIndex_o_custom_o_fulltext_o_with_o_lowercase__7", line: 112 }; return __func(_, this, arguments, createRelationshipIndex_o_custom_o_fulltext_o_with_o_lowercase__7, 0, __frame, function __$createRelationshipIndex_o_custom_o_fulltext_o_with_o_lowercase__7() {

        return db.createRelationshipIndex(relCustomIndexName, indexConfig, __cb(_, __frame, 2, 9, function __$createRelationshipIndex_o_custom_o_fulltext_o_with_o_lowercase__7() {
          return db.getRelationshipIndexes(__cb(_, __frame, 3, 22, function ___(__0, __1) { relIndexes = __1;
            expect(relIndexes).to.contain(relCustomIndexName);
            return _(null, expect(relIndexes).to.contain.key(relCustomIndexName)); }, true)); }, true)); }); },

  "createRelationshipIndex custom fulltext with no lowercase": function createRelationshipIndex_o_custom_o_fulltext_o_with_o_no_o_lowercase__8(_) { var relIndexes; var __frame = { name: "createRelationshipIndex_o_custom_o_fulltext_o_with_o_no_o_lowercase__8", line: 119 }; return __func(_, this, arguments, createRelationshipIndex_o_custom_o_fulltext_o_with_o_no_o_lowercase__8, 0, __frame, function __$createRelationshipIndex_o_custom_o_fulltext_o_with_o_no_o_lowercase__8() {

        return db.createRelationshipIndex(relCustomIndexName2, indexConfig, __cb(_, __frame, 2, 9, function __$createRelationshipIndex_o_custom_o_fulltext_o_with_o_no_o_lowercase__8() {
          return db.getRelationshipIndexes(__cb(_, __frame, 3, 22, function ___(__0, __1) { relIndexes = __1;
            expect(relIndexes).to.contain(relCustomIndexName2);
            return _(null, expect(relIndexes).to.contain.key(relCustomIndexName2)); }, true)); }, true)); }); },

  "create nodes": function create_o_nodes__9(_) { var __frame = { name: "create_o_nodes__9", line: 126 }; return __func(_, this, arguments, create_o_nodes__9, 0, __frame, function __$create_o_nodes__9() {
        daniel = db.createNode(danielData);
        aseem = db.createNode(aseemData);
        mat = db.createNode(matData);
        expect(daniel).to.be.an("object");
        expect(daniel.exists).to.be["false"];
        return _(null, expect(daniel.self).to.not.exist); }); },

  "save nodes": function save_o_nodes__10(_) { var __frame = { name: "save_o_nodes__10", line: 134 }; return __func(_, this, arguments, save_o_nodes__10, 0, __frame, function __$save_o_nodes__10() {
        return flows.collect(__cb(_, __frame, 1, 12, function __$save_o_nodes__10() {
          expect(daniel.exists).to.be["true"];
          expect(daniel.self).to.be.a("string");
          expect(daniel.self).to.not.equal(aseem.self);
          expect(daniel.data).to.eql(danielData);
          expect(aseem.exists).to.be["true"];
          expect(aseem.self).to.be.a("string");
          expect(aseem.self).to.not.equal(daniel.self);
          return _(null, expect(aseem.data).to.eql(aseemData)); }, true), [daniel.save(false),aseem.save(false),mat.save(false),]); }); },

  "create realtionships": function create_o_realtionships__11(_) { var __frame = { name: "create_o_realtionships__11", line: 145 }; return __func(_, this, arguments, create_o_realtionships__11, 0, __frame, function __$create_o_realtionships__11() {
        return daniel.createRelationshipTo(aseem, "follows", {
          created: Date.now() }, __cb(_, __frame, 1, 28, function ___(__0, __1) { relationship = __1;

          testRelationship(relationship);
          expect(relationship.start).to.eq(daniel);
          return _(null, expect(relationship.end).to.eq(aseem)); }, true)); }); },

  "serialize & de-serialize nodes": function serialize_o__o__o_de_o_serialize_o_nodes__12(_) { var aseem2, daniel2, json, obj; var __frame = { name: "serialize_o__o__o_de_o_serialize_o_nodes__12", line: 153 }; return __func(_, this, arguments, serialize_o__o__o_de_o_serialize_o_nodes__12, 0, __frame, function __$serialize_o__o__o_de_o_serialize_o_nodes__12() {

        json = JSON.stringify([aseem,daniel,]);
        obj = JSON.parse(json, db.reviveJSON);
        expect(obj).to.be.an("array");
        expect(obj).to.have.length(2);
        aseem2 = obj[0], daniel2 = obj[1];
        expect(aseem2).to.be.an("object");
        expect(aseem2.data).to.eql(aseem.data);
        expect(daniel2).to.be.an("object");
        return _(null, expect(daniel2.data).to.eql(daniel.data)); }); },

  "serialize & de-serialize relationship": function serialize_o__o__o_de_o_serialize_o_relationship__13(_) { var json, obj, rel2; var __frame = { name: "serialize_o__o__o_de_o_serialize_o_relationship__13", line: 165 }; return __func(_, this, arguments, serialize_o__o__o_de_o_serialize_o_relationship__13, 0, __frame, function __$serialize_o__o__o_de_o_serialize_o_relationship__13() {

        json = JSON.stringify({
          foo: {
            bar: relationship } });


        obj = JSON.parse(json, db.reviveJSON);
        expect(obj).to.be.an("object");
        expect(obj.foo).to.be.an("object");
        rel2 = obj.foo.bar;
        expect(rel2).to.be.an("object");
        return _(null, expect(rel2.data).to.eql(relationship.data)); }); },

  "fetch relationships": function fetch_o_relationships__14(_) { var aseemFuture, danielFuture, relationships; var __frame = { name: "fetch_o_relationships__14", line: 179 }; return __func(_, this, arguments, fetch_o_relationships__14, 0, __frame, function __$fetch_o_relationships__14() {

        danielFuture = daniel.getRelationships("follows", false);
        aseemFuture = aseem.getRelationships("follows", false);
        return danielFuture(__cb(_, __frame, 4, 22, function ___(__0, __1) { relationships = __1;
          testRelationships(relationships);
          expect(relationships[0].start).to.eq(daniel);
          return aseemFuture(__cb(_, __frame, 7, 22, function ___(__0, __2) { relationships = __2;
            testRelationships(relationships);
            return _(null, expect(relationships[0].end).to.eq(aseem)); }, true)); }, true)); }); },

  "traverse nodes": function traverse_o_nodes__15(_) { var aseemFuture, danielFuture, nodes; var __frame = { name: "traverse_o_nodes__15", line: 190 }; return __func(_, this, arguments, traverse_o_nodes__15, 0, __frame, function __$traverse_o_nodes__15() {

        danielFuture = daniel.getRelationshipNodes("follows", false);
        aseemFuture = aseem.getRelationshipNodes("follows", false);
        return danielFuture(__cb(_, __frame, 4, 14, function ___(__0, __1) { nodes = __1;
          expect(nodes).to.be.an("array");
          expect(nodes).to.have.length(1);
          expect(nodes[0]).to.be.an("object");
          expect(nodes[0].exists).to.be["true"];
          expect(nodes[0].self).to.equal(aseem.self);
          expect(nodes[0].data).to.eql(aseemData);
          return aseemFuture(__cb(_, __frame, 11, 14, function ___(__0, __2) { nodes = __2;
            expect(nodes).to.be.an("array");
            expect(nodes).to.have.length(1);
            expect(nodes[0]).to.be.an("object");
            expect(nodes[0].exists).to.be["true"];
            expect(nodes[0].self).to.equal(daniel.self);
            return _(null, expect(nodes[0].data).to.eql(danielData)); }, true)); }, true)); }); },

  "index nodes": function index_o_nodes__16(_) { var node; var __frame = { name: "index_o_nodes__16", line: 209 }; return __func(_, this, arguments, index_o_nodes__16, 0, __frame, function __$index_o_nodes__16() {

        return daniel.index("users", "name", "Daniel", __cb(_, __frame, 2, 13, function __$index_o_nodes__16() {
          return db.getIndexedNode("users", "name", "Daniel", __cb(_, __frame, 3, 16, function ___(__0, __1) { node = __1;
            expect(node).to.be.an("object");
            expect(node.exists).to.be["true"];
            return daniel.unindex("users", "name", "Daniel", __cb(_, __frame, 6, 20, _, true)); }, true)); }, true)); }); },

  "index nodes to custom fulltext index with lowercase": function index_o_nodes_o_to_o_custom_o_fulltext_o_index_o_with_o_lowercase__17(_) { var nodes; var __frame = { name: "index_o_nodes_o_to_o_custom_o_fulltext_o_index_o_with_o_lowercase__17", line: 217 }; return __func(_, this, arguments, index_o_nodes_o_to_o_custom_o_fulltext_o_index_o_with_o_lowercase__17, 0, __frame, function __$index_o_nodes_o_to_o_custom_o_fulltext_o_index_o_with_o_lowercase__17() {

        return daniel.index(nodeCustomIndexName, "name", "Daniel", __cb(_, __frame, 2, 13, function __$index_o_nodes_o_to_o_custom_o_fulltext_o_index_o_with_o_lowercase__17() {
          return db.queryNodeIndex(nodeCustomIndexName, "name:dan*", __cb(_, __frame, 3, 17, function ___(__0, __1) { nodes = __1;
            expect(nodes).to.be.an("array");
            expect(nodes[0].exists).to.be["true"];
            return daniel.unindex(nodeCustomIndexName, "name", "Daniel", __cb(_, __frame, 6, 20, _, true)); }, true)); }, true)); }); },

  "index nodes to custom fulltext index with no lowercase": function index_o_nodes_o_to_o_custom_o_fulltext_o_index_o_with_o_no_o_lowercase__18(_) { var nodes; var __frame = { name: "index_o_nodes_o_to_o_custom_o_fulltext_o_index_o_with_o_no_o_lowercase__18", line: 225 }; return __func(_, this, arguments, index_o_nodes_o_to_o_custom_o_fulltext_o_index_o_with_o_no_o_lowercase__18, 0, __frame, function __$index_o_nodes_o_to_o_custom_o_fulltext_o_index_o_with_o_no_o_lowercase__18() {

        return daniel.index(nodeCustomIndexName2, "name", "Daniel", __cb(_, __frame, 2, 13, function __$index_o_nodes_o_to_o_custom_o_fulltext_o_index_o_with_o_no_o_lowercase__18() {
          return db.queryNodeIndex(nodeCustomIndexName2, "name:Dan*", __cb(_, __frame, 3, 17, function ___(__0, __1) { nodes = __1;
            expect(nodes).to.be.an("array");
            expect(nodes[0].exists).to.be["true"];
            return daniel.unindex(nodeCustomIndexName2, "name", "Daniel", __cb(_, __frame, 6, 20, _, true)); }, true)); }, true)); }); },

  "index relationships": function index_o_relationships__19(_) { var rel; var __frame = { name: "index_o_relationships__19", line: 233 }; return __func(_, this, arguments, index_o_relationships__19, 0, __frame, function __$index_o_relationships__19() {

        return relationship.index("follows", "name", "Daniel", __cb(_, __frame, 2, 19, function __$index_o_relationships__19() {
          return db.getIndexedRelationship("follows", "name", "Daniel", __cb(_, __frame, 3, 15, function ___(__0, __1) { rel = __1;
            expect(rel).to.be.an("object");
            expect(rel.exists).to.be["true"];
            expect(rel.self).to.be.a("string");
            expect(rel.type).to.eq("follows");
            return relationship.unindex("follows", "name", "Daniel", __cb(_, __frame, 8, 26, _, true)); }, true)); }, true)); }); },

  "index relationships to custom fulltext index with lowercase": function index_o_relationships_o_to_o_custom_o_fulltext_o_index_o_with_o_lowercase__20(_) { var rels; var __frame = { name: "index_o_relationships_o_to_o_custom_o_fulltext_o_index_o_with_o_lowercase__20", line: 243 }; return __func(_, this, arguments, index_o_relationships_o_to_o_custom_o_fulltext_o_index_o_with_o_lowercase__20, 0, __frame, function __$index_o_relationships_o_to_o_custom_o_fulltext_o_index_o_with_o_lowercase__20() {

        return relationship.index(relCustomIndexName, "name", "Daniel", __cb(_, __frame, 2, 19, function __$index_o_relationships_o_to_o_custom_o_fulltext_o_index_o_with_o_lowercase__20() {
          return db.queryRelationshipIndex(relCustomIndexName, "name:*niE*", __cb(_, __frame, 3, 16, function ___(__0, __1) { rels = __1;
            expect(rels).to.be.an("array");
            expect(rels[0].exists).to.be["true"];
            expect(rels[0].self).to.be.a("string");
            expect(rels[0].type).to.eq("follows");
            return relationship.unindex(relCustomIndexName, "name", "Daniel", __cb(_, __frame, 8, 26, _, true)); }, true)); }, true)); }); },

  "index relationships to custom fulltext index with no lowercase": function index_o_relationships_o_to_o_custom_o_fulltext_o_index_o_with_o_no_o_lowercase__21(_) { var rels; var __frame = { name: "index_o_relationships_o_to_o_custom_o_fulltext_o_index_o_with_o_no_o_lowercase__21", line: 253 }; return __func(_, this, arguments, index_o_relationships_o_to_o_custom_o_fulltext_o_index_o_with_o_no_o_lowercase__21, 0, __frame, function __$index_o_relationships_o_to_o_custom_o_fulltext_o_index_o_with_o_no_o_lowercase__21() {

        return relationship.index(relCustomIndexName2, "name", "Daniel", __cb(_, __frame, 2, 19, function __$index_o_relationships_o_to_o_custom_o_fulltext_o_index_o_with_o_no_o_lowercase__21() {
          return db.queryRelationshipIndex(relCustomIndexName2, "name:*nie*", __cb(_, __frame, 3, 16, function ___(__0, __1) { rels = __1;
            expect(rels).to.be.an("array");
            expect(rels[0].exists).to.be["true"];
            expect(rels[0].self).to.be.a("string");
            expect(rels[0].type).to.eq("follows");
            return relationship.unindex(relCustomIndexName2, "name", "Daniel", __cb(_, __frame, 8, 26, _, true)); }, true)); }, true)); }); },

  "unindex nodes": function unindex_o_nodes__22(_) { var idNode, matNode, mattNode; var __frame = { name: "unindex_o_nodes__22", line: 263 }; return __func(_, this, arguments, unindex_o_nodes__22, 0, __frame, function __$unindex_o_nodes__22() {

        return mat.index(nodeIndexName, "name", "Mat", __cb(_, __frame, 2, 10, function __$unindex_o_nodes__22() {
          return mat.index(nodeIndexName, "name", "Matt", __cb(_, __frame, 3, 10, function __$unindex_o_nodes__22() {
            return mat.index(nodeIndexName, "id", "12345", __cb(_, __frame, 4, 10, function __$unindex_o_nodes__22() {
              return mat.unindex(nodeIndexName, "name", "Matt", __cb(_, __frame, 5, 10, function __$unindex_o_nodes__22() {
                return db.getIndexedNode(nodeIndexName, "name", "Matt", __cb(_, __frame, 6, 20, function ___(__0, __1) { mattNode = __1;
                  return db.getIndexedNode(nodeIndexName, "name", "Mat", __cb(_, __frame, 7, 19, function ___(__0, __2) { matNode = __2;
                    return db.getIndexedNode(nodeIndexName, "id", "12345", __cb(_, __frame, 8, 18, function ___(__0, __3) { idNode = __3;
                      expect(mattNode).to.not.exist;
                      expect(matNode).to.be.an("object");
                      expect(matNode.exists).to.be["true"];
                      expect(idNode).to.be.an("object");
                      expect(idNode.exists).to.be["true"];
                      return mat.unindex(nodeIndexName, "name", __cb(_, __frame, 14, 10, function __$unindex_o_nodes__22() {
                        return db.getIndexedNode(nodeIndexName, "name", "Matt", __cb(_, __frame, 15, 20, function ___(__0, __4) { mattNode = __4;
                          return db.getIndexedNode(nodeIndexName, "name", "Mat", __cb(_, __frame, 16, 19, function ___(__0, __5) { matNode = __5;
                            return db.getIndexedNode(nodeIndexName, "id", "12345", __cb(_, __frame, 17, 18, function ___(__0, __6) { idNode = __6;
                              expect(mattNode).to.not.exist;
                              expect(matNode).to.not.exist;
                              expect(idNode).to.be.an("object");
                              expect(idNode.exists).to.be["true"];
                              return mat.unindex(nodeIndexName, __cb(_, __frame, 22, 10, function __$unindex_o_nodes__22() {
                                return db.getIndexedNode(nodeIndexName, "name", "Matt", __cb(_, __frame, 23, 20, function ___(__0, __7) { mattNode = __7;
                                  return db.getIndexedNode(nodeIndexName, "name", "Mat", __cb(_, __frame, 24, 19, function ___(__0, __8) { matNode = __8;
                                    return db.getIndexedNode(nodeIndexName, "id", "12345", __cb(_, __frame, 25, 18, function ___(__0, __9) { idNode = __9;
                                      expect(mattNode).to.not.exist;
                                      expect(matNode).to.not.exist;
                                      return _(null, expect(idNode).to.not.exist); }, true)); }, true)); }, true)); }, true)); }, true)); }, true)); }, true)); }, true)); }, true)); }, true)); }, true)); }, true)); }, true)); }, true)); }, true)); }); },

  "unindex relationships": function unindex_o_relationships__23(_) { var idRelationship, matRelationship, mattRelationship; var __frame = { name: "unindex_o_relationships__23", line: 293 }; return __func(_, this, arguments, unindex_o_relationships__23, 0, __frame, function __$unindex_o_relationships__23() {

        return relationship.index(relIndexName, "name", "Mat", __cb(_, __frame, 2, 19, function __$unindex_o_relationships__23() {
          return relationship.index(relIndexName, "name", "Matt", __cb(_, __frame, 3, 19, function __$unindex_o_relationships__23() {
            return relationship.index(relIndexName, "id", "12345", __cb(_, __frame, 4, 19, function __$unindex_o_relationships__23() {
              return relationship.unindex(relIndexName, "name", "Matt", __cb(_, __frame, 5, 19, function __$unindex_o_relationships__23() {
                return db.getIndexedRelationship(relIndexName, "name", "Matt", __cb(_, __frame, 6, 28, function ___(__0, __1) { mattRelationship = __1;
                  return db.getIndexedRelationship(relIndexName, "name", "Mat", __cb(_, __frame, 7, 27, function ___(__0, __2) { matRelationship = __2;
                    return db.getIndexedRelationship(relIndexName, "id", "12345", __cb(_, __frame, 8, 26, function ___(__0, __3) { idRelationship = __3;
                      expect(mattRelationship).to.not.exist;
                      expect(matRelationship).to.be.an("object");
                      expect(matRelationship.exists).to.be["true"];
                      expect(idRelationship).to.be.an("object");
                      expect(idRelationship.exists).to.be["true"];
                      return relationship.unindex(relIndexName, "name", __cb(_, __frame, 14, 19, function __$unindex_o_relationships__23() {
                        return db.getIndexedRelationship(relIndexName, "name", "Matt", __cb(_, __frame, 15, 28, function ___(__0, __4) { mattRelationship = __4;
                          return db.getIndexedRelationship(relIndexName, "name", "Mat", __cb(_, __frame, 16, 27, function ___(__0, __5) { matRelationship = __5;
                            return db.getIndexedRelationship(relIndexName, "id", "12345", __cb(_, __frame, 17, 26, function ___(__0, __6) { idRelationship = __6;
                              expect(mattRelationship).to.not.exist;
                              expect(matRelationship).to.not.exist;
                              expect(idRelationship).to.be.an("object");
                              expect(idRelationship.exists).to.be["true"];
                              return relationship.unindex(relIndexName, __cb(_, __frame, 22, 19, function __$unindex_o_relationships__23() {
                                return db.getIndexedRelationship(relIndexName, "name", "Matt", __cb(_, __frame, 23, 28, function ___(__0, __7) { mattRelationship = __7;
                                  return db.getIndexedRelationship(relIndexName, "name", "Mat", __cb(_, __frame, 24, 27, function ___(__0, __8) { matRelationship = __8;
                                    return db.getIndexedRelationship(relIndexName, "id", "12345", __cb(_, __frame, 25, 26, function ___(__0, __9) { idRelationship = __9;
                                      expect(mattRelationship).to.not.exist;
                                      expect(matRelationship).to.not.exist;
                                      return _(null, expect(idRelationship).to.not.exist); }, true)); }, true)); }, true)); }, true)); }, true)); }, true)); }, true)); }, true)); }, true)); }, true)); }, true)); }, true)); }, true)); }, true)); }, true)); }); },

    deleteNodeIndex: function deleteNodeIndex__24(_) { var nodeIndexes; var __frame = { name: "deleteNodeIndex__24", line: 323 }; return __func(_, this, arguments, deleteNodeIndex__24, 0, __frame, function __$deleteNodeIndex__24() {

        return db.deleteNodeIndex(nodeIndexName, __cb(_, __frame, 2, 9, function __$deleteNodeIndex__24() {
          return db.getNodeIndexes(__cb(_, __frame, 3, 23, function ___(__0, __1) { nodeIndexes = __1;
            expect(nodeIndexes).to.not.contain(nodeIndexName);
            return _(null, expect(nodeIndexes).to.not.contain.key(nodeIndexName)); }, true)); }, true)); }); },

    deleteRelationshipIndex: function deleteRelationshipIndex__25(_) { var relIndexes; var __frame = { name: "deleteRelationshipIndex__25", line: 330 }; return __func(_, this, arguments, deleteRelationshipIndex__25, 0, __frame, function __$deleteRelationshipIndex__25() {

        return db.deleteRelationshipIndex(relIndexName, __cb(_, __frame, 2, 9, function __$deleteRelationshipIndex__25() {
          return db.getRelationshipIndexes(__cb(_, __frame, 3, 22, function ___(__0, __1) { relIndexes = __1;
            expect(relIndexes).to.not.contain(relIndexName);
            return _(null, expect(relIndexes).to.not.contain.key(relIndexName)); }, true)); }, true)); }); } };



  testRelationship = function(relationship) {
    expect(relationship).to.be.an("object");
    expect(relationship.exists).to.be["true"];
    expect(relationship.self).to.be.a("string");
    expect(relationship.type).to.eq("follows");
    expect(relationship.start).to.be.an("object");
    expect(relationship.end).to.be.an("object");
    expect(relationship.start.self).to.equal(daniel.self);
    return expect(relationship.end.self).to.equal(aseem.self); };


  testRelationships = function(relationships) {
    expect(relationships).to.be.an("array");
    expect(relationships).to.have.length(1);
    return testRelationship(relationships[0]); };


}).call(this);
